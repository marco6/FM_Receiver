-- -------------------------------------------------------------
--
-- Module: filtro_di_prova_under
--
-- Generated by MATLAB(R) 7.9 and the Filter Design HDL Coder 2.5.
--
-- Generated on: 2015-01-09 17:28:39
--
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\ienny\Desktop
-- Name: filtro di prova 
-- TestBenchStimulus: impulse step ramp chirp noise 
--
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 11
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s16,16 -> [-5.000000e-001 5.000000e-001)
-- Input             : s16,15 -> [-1 1)
-- Filter Internals  : Full Precision
--   Output          : s33,31 -> [-2 2)  (auto determined)
--   Product         : s31,31 -> [-5.000000e-001 5.000000e-001)  (auto determined)
--   Accumulator     : s33,31 -> [-2 2)  (auto determined)
--   Round Mode      : No rounding
--   Overflow Mode   : No overflow
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;
ENTITY filtro_di_prova_under IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         filter_out                      :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En31
         );

END filtro_di_prova_under;


----------------------------------------------------------------
--Module Architecture: filtro_di_prova_under
----------------------------------------------------------------
ARCHITECTURE rtl OF filtro_di_prova_under IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(-4335, 16); -- sfix16_En16
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(-3185, 16); -- sfix16_En16
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(2233, 16); -- sfix16_En16
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(10307, 16); -- sfix16_En16
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(17535, 16); -- sfix16_En16
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(20427, 16); -- sfix16_En16
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(17535, 16); -- sfix16_En16
  CONSTANT coeff8                         : signed(15 DOWNTO 0) := to_signed(10307, 16); -- sfix16_En16
  CONSTANT coeff9                         : signed(15 DOWNTO 0) := to_signed(2233, 16); -- sfix16_En16
  CONSTANT coeff10                        : signed(15 DOWNTO 0) := to_signed(-3185, 16); -- sfix16_En16
  CONSTANT coeff11                        : signed(15 DOWNTO 0) := to_signed(-4335, 16); -- sfix16_En16

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 10); -- sfix16_En15
  SIGNAL product11                        : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product10                        : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_1                       : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product9                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_2                       : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product8                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_3                       : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product7                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_4                       : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product6                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_5                       : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product5                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_6                       : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product4                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_7                       : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product3                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_8                       : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product2                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_9                       : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product1_cast                    : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL product1                         : signed(30 DOWNTO 0); -- sfix31_En31
  SIGNAL mul_temp_10                      : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL sum1                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp                         : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum2                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_1                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum3                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_2                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum4                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_3                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum5                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_4                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum6                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_5                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum7                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_6                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum8                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_7                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum9                             : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_8                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL sum10                            : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL add_temp_9                       : signed(33 DOWNTO 0); -- sfix34_En31
  SIGNAL output_typeconvert               : signed(32 DOWNTO 0); -- sfix33_En31
  SIGNAL output_register                  : signed(32 DOWNTO 0); -- sfix33_En31


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 10) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 10) <= delay_pipeline(0 TO 9);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;


  mul_temp <= delay_pipeline(10) * coeff11;
  product11 <= mul_temp(30 DOWNTO 0);

  mul_temp_1 <= delay_pipeline(9) * coeff10;
  product10 <= mul_temp_1(30 DOWNTO 0);

  mul_temp_2 <= delay_pipeline(8) * coeff9;
  product9 <= mul_temp_2(30 DOWNTO 0);

  mul_temp_3 <= delay_pipeline(7) * coeff8;
  product8 <= mul_temp_3(30 DOWNTO 0);

  mul_temp_4 <= delay_pipeline(6) * coeff7;
  product7 <= mul_temp_4(30 DOWNTO 0);

  mul_temp_5 <= delay_pipeline(5) * coeff6;
  product6 <= mul_temp_5(30 DOWNTO 0);

  mul_temp_6 <= delay_pipeline(4) * coeff5;
  product5 <= mul_temp_6(30 DOWNTO 0);

  mul_temp_7 <= delay_pipeline(3) * coeff4;
  product4 <= mul_temp_7(30 DOWNTO 0);

  mul_temp_8 <= delay_pipeline(2) * coeff3;
  product3 <= mul_temp_8(30 DOWNTO 0);

  mul_temp_9 <= delay_pipeline(1) * coeff2;
  product2 <= mul_temp_9(30 DOWNTO 0);

  product1_cast <= resize(product1, 33);

  mul_temp_10 <= delay_pipeline(0) * coeff1;
  product1 <= mul_temp_10(30 DOWNTO 0);

  add_temp <= resize(product1_cast, 34) + resize(product2, 34);
  sum1 <= add_temp(32 DOWNTO 0);

  add_temp_1 <= resize(sum1, 34) + resize(product3, 34);
  sum2 <= add_temp_1(32 DOWNTO 0);

  add_temp_2 <= resize(sum2, 34) + resize(product4, 34);
  sum3 <= add_temp_2(32 DOWNTO 0);

  add_temp_3 <= resize(sum3, 34) + resize(product5, 34);
  sum4 <= add_temp_3(32 DOWNTO 0);

  add_temp_4 <= resize(sum4, 34) + resize(product6, 34);
  sum5 <= add_temp_4(32 DOWNTO 0);

  add_temp_5 <= resize(sum5, 34) + resize(product7, 34);
  sum6 <= add_temp_5(32 DOWNTO 0);

  add_temp_6 <= resize(sum6, 34) + resize(product8, 34);
  sum7 <= add_temp_6(32 DOWNTO 0);

  add_temp_7 <= resize(sum7, 34) + resize(product9, 34);
  sum8 <= add_temp_7(32 DOWNTO 0);

  add_temp_8 <= resize(sum8, 34) + resize(product10, 34);
  sum9 <= add_temp_8(32 DOWNTO 0);

  add_temp_9 <= resize(sum9, 34) + resize(product11, 34);
  sum10 <= add_temp_9(32 DOWNTO 0);

  output_typeconvert <= sum10;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
